name: build-macos
run-name: Build oF and BreathShowApp

# make the action not run on the local repo if the branch is also in a pull request to OF/OF
on:
  push:
    #branches: [ main ]
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  ccache: ccache
    
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build-macos:
    runs-on: macos-13
    strategy:
      matrix:
        cfg:
          - {target: osx, opt: "xcode"}
          # - {target: osx, opt: "makefiles"}
    env:
      TARGET: ${{matrix.cfg.target}}
      OPT: ${{matrix.cfg.opt}}
    steps:        
      - name: Checkout BreathShow
        uses: actions/checkout@v4
        with:
          path: BreathShow
          
      - name: Checkout oF
        uses: actions/checkout@v4
        with:
          repository: hiroMTB/openFrameworks
          ref: expose-ofNode-position-to-public-latestMaster
          path: of
          submodules: true

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.11
        with:
          key: ${{ matrix.cfg.target }}-${{ matrix.cfg.opt }}

      - name: Download libs
        # continue-on-error: true
        run: ./of/scripts/$TARGET/download_libs.sh


      # emptyExample project, works!
      # - name: Build oF + emptyExample
      #   run: ./of/scripts/ci/$TARGET/build.sh $OPT;
      #   env:
      #     DEVELOPER_DIR: "/Applications/Xcode.app/Contents/Developer"
      #     SDKROOT: "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"

      # # Upload executable binaries to GitHub
      # - name: Uploading artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: emptyExampleApp
      #     path: ./of/scripts/templates/osx/bin


      - name: Create project files for Xcode
        run: |
          ./BreathShow/ci/projectGenerator -o"./of" -p"osx" ./BreathShow/BreathShowApp

      #Building the project
      - name: Building BreathShow
        run: |
          cd ./BreathShow/BreathShowApp
          ls -la
          xcodebuild -arch x86_64 -configuration Release -target BreathShowApp -project "BreathShowApp.xcodeproj"

      #Codesign App
      - name: Codesign with self-signed certificate
        env:
          #Get secrets stored in Github Action Secrets
          MACOS_CERTIFICATE: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p $KEYCHAIN_PASSWORD build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p $KEYCHAIN_PASSWORD build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PASSWORD build.keychain
          /usr/bin/codesign --force -s "of-cert" ./BreathShow/BreathShowApp/bin/BreathShowApp.app/Contents/MacOS/BreathShowApp -v
          /usr/bin/codesign -dv ./BreathShow/BreathShowApp/bin/BreathShowApp.app

      # Make tar file to maintain file permiossion
      - name: 'Tar files'
        run: tar -cvf ./BreathShowApp.app.tar ./BreathShow/BreathShowApp/bin

      #Upload executable binaries to GitHub
      # - name: Uploading artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: BreathShowApp
      #     path: ./BreathShowApp.app.tar

      #Create Release
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          name: "BreathShowApp ${{github.ref_name}}"
          artifacts: "./BreathShowApp.app.tar"
          #bodyFile: "README.md"